<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tooling on go bits</title>
    <link>http://golang.rakyll.org/tags/tooling/</link>
    <description>Recent content in Tooling on go bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Sep 2016 11:27:27 -0400</lastBuildDate>
    <atom:link href="http://golang.rakyll.org/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Examples coverage</title>
      <link>http://golang.rakyll.org/examples-coverage/</link>
      <pubDate>Thu, 08 Sep 2016 11:27:27 -0400</pubDate>
      
      <guid>http://golang.rakyll.org/examples-coverage/</guid>
      <description>&lt;p&gt;Go programming language provides many unique good features to write and
maintain examples for your packages backed by the testing tools.&lt;/p&gt;

&lt;p&gt;As an addition to the test coverage and test coverage report, &lt;code&gt;go test&lt;/code&gt;
also provides coverage for examples if you filter by &amp;ldquo;Example&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Use the following commands in your package to use the
&lt;code&gt;-run&lt;/code&gt; flag to only the match the example tests and view the results
in your browser.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go test -v -run=Example -coverprofile=c.out &amp;amp;&amp;amp; go tool cover -html=c.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note, the coverage is reported for Examples with an Output block
and tested. Non-tested examples are not considered in the scope of go test.&lt;/p&gt;

&lt;p&gt;Here is what &lt;a href=&#34;http://golang.rakyll.org/att/example-coverage.html&#34;&gt;coverage&lt;/a&gt; looks like
for the strings package from the stdlib. Not all cases are supposed to be
documented with an example maybe but it might your project an idea if you
are missing out a significant case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Instruments to profile Go programs</title>
      <link>http://golang.rakyll.org/instruments/</link>
      <pubDate>Fri, 02 Sep 2016 11:27:27 -0400</pubDate>
      
      <guid>http://golang.rakyll.org/instruments/</guid>
      <description>&lt;p&gt;Apple has a suite of instrumentation and tracing tools for performance
analysis avaiable as a part of their Xcode tooling set. In this article,
we will use &lt;a href=&#34;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/&#34;&gt;Instruments&lt;/a&gt;
to record and analyze the CPU profile of a Go program.&lt;/p&gt;

&lt;p&gt;Instruments also provide a large set of macOS-specific tracing and profiling
if you have performance issues specifically on darwin.&lt;/p&gt;

&lt;p&gt;Some of these specific profiles are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System trace: Collects comprehensive information about system calls,
scheduling, user-kernel space transitions. (Available only on OSX.)&lt;/li&gt;
&lt;li&gt;System usage: Gives very detailed output about I/O system activity.
(Available only on iOS.)&lt;/li&gt;
&lt;li&gt;File Activity: Monitors file and directory activity such as open/close,
permission modifications, creation, copying and moving.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instruments provide a rich and very easy to use UI to display profiles.
I highly recommend it as an addition to existing profiler UIs and vizualizers.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s profile a Go program.&lt;/p&gt;

&lt;p&gt;Launch the Instruments app and select &amp;ldquo;Time Profiler&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Create a target with your Go binary and arguments and env variables
you want to start the binary with. In this tutorial, I will use the
following program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/rakyll/hey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will use &lt;code&gt;hey&lt;/code&gt; to make 10000 requests with 200 goroutines
to the target provided in the arguments.&lt;/p&gt;

&lt;p&gt;The target I have for &lt;code&gt;hey&lt;/code&gt; looks like what&amp;rsquo;s below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://golang.rakyll.org/img/instruments-target.png&#34; alt=&#34;Instruments target&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have a target, you can click on the record button to start
recording samples. Once enough samples are collected, stop or it will
eventually stop when the program finishes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://golang.rakyll.org/img/instruments-results.png&#34; alt=&#34;Instruments results&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can filter by symbol name, user vs kernel callstacks, time span,
physical or logical CPU and more. You can also double click any of the symbols listed
to jump to the source code.&lt;/p&gt;

&lt;p&gt;Please note that Go programs cannot work with every profile available
on Instruments. But there are a few profiles that absolutely can improve
your profiling experience. With stack frame pointers enabled by default in Go 1.7,
it became easier for tools like Instruments to capture backtraces more efficiently.&lt;/p&gt;

&lt;p&gt;Happy profiling!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>eg to apply transformations to Go code</title>
      <link>http://golang.rakyll.org/eg/</link>
      <pubDate>Sat, 27 Aug 2016 11:27:27 -0400</pubDate>
      
      <guid>http://golang.rakyll.org/eg/</guid>
      <description>&lt;p&gt;If you are willing to make large scale refactoring in your
Go programs, automating the refactoring tasks is more desirable than
manual editing. &lt;code&gt;eg&lt;/code&gt; is a program that allows you to perform transformations
based on template Go files.&lt;/p&gt;

&lt;p&gt;To install the tool, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get golang.org/x/tools/cmd/eg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;eg&lt;/code&gt; requires a template file to look for which transformation it should
apply to your source code. What&amp;rsquo;s nice is that the template file is a Go file
with little annotations.&lt;/p&gt;

&lt;p&gt;Consider the following Go program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$ cat $GOPATH/src/hello/hello.go
package hello

import &amp;quot;time&amp;quot;

// ExtendWith50000ns adds 50000ns to t.
func ExtendWith50000ns(t time.Time) time.Time {
	return t.Add(time.Duration(50000))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assume you want to eliminate the unnecessary time.Duration casting at ExtendWith50000ns
and as a good practice, you would also like to add a unit to the duration rather than
just passing 50000.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;eg&lt;/code&gt; requires a template file where you define before and afters that represents the
transformation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$ cat T.template
package template

import (
    &amp;quot;time&amp;quot;
)

func before(t time.Time, d time.Duration) time.Time {
    // if already time.Duration, do not cast.
    return t.Add(time.Duration(d))
}

func after(t time.Time, d time.Duration) time.Time  {
    return t.Add(d * time.Nanosecond)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run the &lt;code&gt;eg&lt;/code&gt; command on your hello package to apply it at every occurrence of this pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eg -w -t T.template hello
=== /Users/jbd/src/hello/hello.go (1 matches)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila!&lt;/p&gt;

&lt;p&gt;The file now contains a duration that is not casted unnecessarily and it has a unit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$ cat $GOPATH/src/hello/hello.go
package hello

import &amp;quot;time&amp;quot;

// ExtendWith50000ns adds 50000ns to t.
func ExtendWith50000ns(t time.Time) time.Time {
	return t.Add(50000 * time.Nanosecond)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: There are many &lt;a href=&#34;https://github.com/golang/tools/tree/master/refactor/eg/testdata&#34;&gt;.template files&lt;/a&gt;
underneath the package for testing purposes but they can also be used as a
reference how to write other transformation templates.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>