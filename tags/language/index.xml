<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language on go bits</title>
    <link>http://golang.rakyll.org/tags/language/</link>
    <description>Recent content in Language on go bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Oct 2016 11:27:27 -0400</lastBuildDate>
    <atom:link href="http://golang.rakyll.org/tags/language/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Keeping Go a human-first language</title>
      <link>http://golang.rakyll.org/human-first/</link>
      <pubDate>Tue, 11 Oct 2016 11:27:27 -0400</pubDate>
      
      <guid>http://golang.rakyll.org/human-first/</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: I forked my opinions on this one from a barely readable Twitter thread
and wanted to write it down how I feel about keeping the language internals away
from the users, especially from the newcomers. This is not a skill-level concern,
it is a core goal of Go to provide a high-level programming language that saves users from
excessive mental overhead. Note that these
are personal opinons and are not writen on the behalf of a group.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go is a highly opiniated language when it comes to API design,
readability and human-first approach.
It is critical to understand these aspects and the history of the language
before deep diving into more.&lt;/p&gt;

&lt;p&gt;Go is created at Google to make engineers more productive and do more without
mental overload. Go wishes that behavior is predictable from a human perspective,
rather than humans are being enforced to think as machines to be efficient and productive.
Go sets the same high bar for its runtime. Without having
to learn every layer of implementation details or having to think about
optimizations at every line,
Go wishes to be good enough
to be doing the right for most of the time &amp;ndash; anything else can be optimized.&lt;/p&gt;

&lt;p&gt;It is highly critical for us to keep Go users having
high expectations that things will work out of the box, and escalate major problems
to the team where the promise is not matching the actual behavior. Go is far away from being
a perfect language. It is important not to be sold so quickly but participate in the future of the
language if you are already skilled to understand the internals and their pitfalls.&lt;/p&gt;

&lt;p&gt;I encourage our users to &lt;a href=&#34;https://golang.org/issues/new&#34;&gt;report bugs&lt;/a&gt; rather than creating
extensive documentation around how to hack current limitiations for the short-term gain.
There is much space for improvement in Go and the team desperately needs actual feedback from
actual users to commit work in the right direction.
Go needs to understand its users rather than users having to understand
every aspect of the language. This is the only scalable
approach.&lt;/p&gt;

&lt;p&gt;Maybe along the way, our core goal of creating a human-first language will
be challenged, but I believe Go has proven that a language can be high-level,
precise and performant at the same time. I see no reason we should give up on this
so quickly. I apologize on the behalf of everyone involved in Go for a long time
to forget that this specific language goal needs to keep being communicated better.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>