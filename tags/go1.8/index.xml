<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go1.8 on go bits</title>
    <link>http://golang.rakyll.org/tags/go1.8/index.xml</link>
    <description>Recent content in Go1.8 on go bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://golang.rakyll.org/tags/go1.8/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HTTP/2 Server Push</title>
      <link>http://golang.rakyll.org/http2push/</link>
      <pubDate>Sat, 10 Dec 2016 11:27:27 -0400</pubDate>
      
      <guid>http://golang.rakyll.org/http2push/</guid>
      <description>&lt;p&gt;Go 1.8 is going to feature support for HTTP/2 server push.&lt;/p&gt;

&lt;p&gt;HTTP/2 has many features designed to make the Web faster. One of those features
is the server push, the ability to send resources before the client asks for it.
This feature enables websites to push assets like JavaScript and CSS files
before waiting for the web page to be loaded and asking for those resources.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;net/http&lt;/code&gt; package will support server push by exposing a &lt;a href=&#34;https://tip.golang.org/pkg/net/http/#Pusher&#34;&gt;Pusher API&lt;/a&gt;
that will be supported by HTTP/2 ResponseWriters. This interface is only implemented when HTTP/2 is available.&lt;/p&gt;

&lt;p&gt;In the following handler, we will push &lt;code&gt;main.js&lt;/code&gt; rather than waiting for the page to load
and inkove the request itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const indexHTML = `&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt;
	&amp;lt;script src=&amp;quot;/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
`

http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
    if r.URL.Path != &amp;quot;/&amp;quot; {
        http.NotFound(w, r)
        return
    }
    pusher, ok := w.(http.Pusher)
    if ok { // Push is supported. Try pushing rather than waiting for the browser.
        if err := pusher.Push(&amp;quot;/main.js&amp;quot;, nil); err != nil {
            log.Printf(&amp;quot;Failed to push: %v&amp;quot;, err)
        }
    }
    fmt.Fprintf(w, indexHTML)
})
// Run crypto/tls/generate_cert.go to generate cert.pem and key.pem.
// See https://golang.org/src/crypto/tls/generate_cert.go
log.Fatal(http.ListenAndServeTLS(&amp;quot;:7072&amp;quot;, &amp;quot;cert.pem&amp;quot;, &amp;quot;key.pem&amp;quot;, nil))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the Network tab, you can see that the JavaScript file is loaded by server push rather
than a GET request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://golang.rakyll.org/img/http2push.png&#34; alt=&#34;Push&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Push support will be available in Go 1.8
that is available as &lt;a href=&#34;(https://groups.google.com/forum/#!topic/golang-nuts/QYuo0fai6YE)&#34;&gt;beta&lt;/a&gt;,
download and give this a try. A full sample program can by found on &lt;a href=&#34;https://gist.github.com/rakyll/eec415977f85d50a493ca8472ba97b68&#34;&gt;this gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>